// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package listmonk

import (
	"context"
)

const findSubscriberByEmail = `-- name: FindSubscriberByEmail :one
SELECT id, uuid, email, name, attribs, status, created_at, updated_at FROM subscribers WHERE LOWER(email) = LOWER($1)
`

func (q *Queries) FindSubscriberByEmail(ctx context.Context, lower string) (Subscriber, error) {
	row := q.db.QueryRow(ctx, findSubscriberByEmail, lower)
	var i Subscriber
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Email,
		&i.Name,
		&i.Attribs,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setSubscriber = `-- name: SetSubscriber :one
INSERT INTO subscribers (id, uuid, email, name, attribs) 
VALUES ($1, gen_random_uuid(), $2, $3, $4)
ON CONFLICT (id) DO UPDATE 
  SET email = excluded.email, name = excluded.name, attribs = excluded.attribs, updated_at = CURRENT_TIMESTAMP
RETURNING id, uuid, email, name, attribs, status, created_at, updated_at
`

type SetSubscriberParams struct {
	ID      int32
	Email   string
	Name    string
	Attribs []byte
}

func (q *Queries) SetSubscriber(ctx context.Context, arg SetSubscriberParams) (Subscriber, error) {
	row := q.db.QueryRow(ctx, setSubscriber,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.Attribs,
	)
	var i Subscriber
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Email,
		&i.Name,
		&i.Attribs,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const subscribeList = `-- name: SubscribeList :one
INSERT INTO subscriber_lists (subscriber_id, list_id, status) 
VALUES ($1, $2, $3)
ON CONFLICT (subscriber_id, list_id) DO UPDATE 
  SET status = excluded.status
RETURNING subscriber_id, list_id, meta, status, created_at, updated_at
`

type SubscribeListParams struct {
	SubscriberID int32
	ListID       int32
	Status       SubscriptionStatus
}

func (q *Queries) SubscribeList(ctx context.Context, arg SubscribeListParams) (SubscriberList, error) {
	row := q.db.QueryRow(ctx, subscribeList, arg.SubscriberID, arg.ListID, arg.Status)
	var i SubscriberList
	err := row.Scan(
		&i.SubscriberID,
		&i.ListID,
		&i.Meta,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
